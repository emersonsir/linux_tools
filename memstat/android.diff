diff --git a/Android.mk b/Android.mk
new file mode 100644
index 0000000..a2f7c6f
--- /dev/null
+++ b/Android.mk
@@ -0,0 +1,16 @@
+# Copyright 2011 The Android Open Source Project
+
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := memstat-arm
+LOCAL_SRC_FILES := memstat.c
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
+LOCAL_MODULE_TAGS := eng
+LOCAL_FORCE_STATIC_EXECUTABLE := true
+LOCAL_MODULE_PATH := $(TARGET_OUT_VENDOR_EXECUTABLES)
+LOCAL_UNSTRIPPED_PATH := $(TARGET_ROOT_OUT_UNSTRIPPED)
+
+LOCAL_STATIC_LIBRARIES := libcutils liblog libc
+
+include $(BUILD_EXECUTABLE)
diff --git a/memstat.c b/memstat.c
index c35d694..bcc085e 100644
--- a/memstat.c
+++ b/memstat.c
@@ -20,6 +20,9 @@
 #include <getopt.h>
 #include <errno.h>
 
+#define LOG_TAG "memstat"
+#include "cutils/log.h"
+
 /* blacklist devices that just map physical memory */
 char *blacklist[] = { "/dev/mem",
     "/dev/dri/"
@@ -28,6 +31,7 @@ char *blacklist[] = { "/dev/mem",
 int wide = 0;
 int only_pid = 0;
 int needinode = 0;
+int loop = 0;
 
 typedef int (*qcmp) (const void *, const void *);
 
@@ -52,7 +56,7 @@ static void maptab_expand(void)
     bytes = (maptab_size * 2 + 100) * sizeof(struct mapping);
     maptab_data = (mapping) realloc(maptab_data, bytes);
     if (maptab_data == NULL) {
-	fprintf(stderr, "Error: realloc returned null, possibly out of memory? Exiting.\n");
+	SLOGE("Error: realloc returned null, possibly out of memory? Exiting.\n");
 	exit(1);
     }
     maptab_size = maptab_size * 2 + 100;
@@ -101,7 +105,7 @@ static void read_proc(void)
 		continue;
 	    nread = sscanf(buff, "%lx %lx %4s %lx %s %s %lu %as", &lo, &hi, perm, &offs, major, minor, &inode, &path);
 	    if (nread < 7) {
-		fprintf(stderr, "I don't recognize format of /proc/%d/maps. (nread=%d)\n", pid, nread);
+		SLOGE("I don't recognize format of /proc/%d/maps. (nread=%d)\n", pid, nread);
 		exit(1);
 	    }
 	    if (maptab_fill == maptab_size)
@@ -215,7 +219,7 @@ static void scan_fpath(const char *fn)
     char buff[1024];
 
     if (f == NULL) {
-	fprintf(stderr, "Cannot open /etc/memstat.conf\n");
+	SLOGE("Cannot open /etc/memstat.conf\n");
 	exit(1);
     }
     while (fgets(buff, 1023, f)) {
@@ -237,7 +241,7 @@ static void printline(char *str)
 	str[78] = '.';
 	str[79] = 0;
     }
-    printf("%s\n", str);
+    SLOGD("%s\n", str);
 }
 
 static void summarize_usage(void)
@@ -258,7 +262,7 @@ static void summarize_usage(void)
 	pid = maptab_data[offs].pid;
 	sprintf(filename, "/proc/%d/exe", pid);
 	if ((len = readlink(filename, linkname, PATH_MAX)) == -1) {
-	    fprintf(stderr, "Cannot read link information for %s\n", filename);
+	    SLOGE("Cannot read link information for %s\n", filename);
 	    deleted = 1;
 	}
 	linkname[len] = '\0';
@@ -340,8 +344,8 @@ static void summarize_usage(void)
 	grand += total;
 	sharedgrand += sharedtotal;
     }
-    printf("--------\n");
-    printf("%7ldk (%7ldk)\n", (grand + sharedgrand) / 1024, sharedgrand / 1024);
+    SLOGD("--------\n");
+    SLOGD("%7ldk (%7ldk)\n", (grand + sharedgrand) / 1024, sharedgrand / 1024);
 }
 
 static void usage(char *prog)
@@ -355,7 +359,7 @@ int main(int argc, char **argv)
     char *prog = argv[0];
     int opt;
 
-    while ((opt = getopt(argc, argv, "wp:")) != -1) {
+    while ((opt = getopt(argc, argv, "wp:l")) != -1) {
 	switch (opt) {
 	case 'w':
 	    wide = 1;
@@ -363,14 +367,24 @@ int main(int argc, char **argv)
 	case 'p':
 	    only_pid = atoi(optarg);
 	    break;
+	case 'l':
+	    loop = 1;
+	    break;
 	default:
 	    usage(prog);
 	}
     }
 
+work:
     read_proc();
     if (needinode)
 	scan_fpath("/etc/memstat.conf");
     summarize_usage();
+
+    if (loop) {
+        sleep(60);
+        goto work;
+    }
+
     return (0);
 }
